<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="DESKTOP-3TAMLIN" failures="0" tests="12" name="Default test(failed)" time="0.229" errors="0" timestamp="28 May 2023 20:07:32 GMT">
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeTest launchBrowser" time="0.0">
    <failure type="java.lang.IllegalStateException" message="The driver executable does not exist: F:\Chromedriverfor\chromedriver.exe">
      <![CDATA[java.lang.IllegalStateException: The driver executable does not exist: F:\Chromedriverfor\chromedriver.exe
	at com.google.common.base.Preconditions.checkState(Preconditions.java:518)
	at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:136)
	at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:131)
	at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:32)
	at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:137)
	at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:330)
	at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:88)
	at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:124)
	at com.hybridFramework.testBase.TestBase.getBrowser(TestBase.java:93)
	at com.hybridFramework.testBase.TestBase.launchBrowser(TestBase.java:69)
... Removed 21 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeTest launchBrowser -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="com.hybridFramework.testBase.TestBase" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="testLoginToAddBankMaker" time="0.001">
    <skipped/>
  </testcase> <!-- testLoginToAddBankMaker -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="testToAddBankMakerPage" time="0.003">
    <skipped/>
  </testcase> <!-- testToAddBankMakerPage -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="testToBankchekerlogin" time="0.009">
    <skipped/>
  </testcase> <!-- testToBankchekerlogin -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="verifyAddcheckerListinBankCheckerpage" time="0.001">
    <skipped/>
  </testcase> <!-- verifyAddcheckerListinBankCheckerpage -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="clickonsubmitbuttonAndverifySuccesfullMessagePage" time="0.004">
    <skipped/>
  </testcase> <!-- clickonsubmitbuttonAndverifySuccesfullMessagePage -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="gotoMakerWhenCheckerApprovedBankMakerpage" time="0.001">
    <skipped/>
  </testcase> <!-- gotoMakerWhenCheckerApprovedBankMakerpage -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="switchToMainwindow" time="0.003">
    <skipped/>
  </testcase> <!-- switchToMainwindow -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="testloginToBankCheckerPage" time="0.002">
    <skipped/>
  </testcase> <!-- testloginToBankCheckerPage -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="verifyBankCheckerPageListAfterModificationhasDoneByMaker" time="0.001">
    <skipped/>
  </testcase> <!-- verifyBankCheckerPageListAfterModificationhasDoneByMaker -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="goToTheBankMakerToVerifyCheckerHasApprovedTheModifyData" time="0.0">
    <skipped/>
  </testcase> <!-- goToTheBankMakerToVerifyCheckerHasApprovedTheModifyData -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="switchTowindowModifyViewPageToAddBankMakerPage" time="0.004">
    <skipped/>
  </testcase> <!-- switchTowindowModifyViewPageToAddBankMakerPage -->
  <testcase classname="com.hybridFramework.AddMaker.AddBankMakerTest" name="testloginToBankCheckerToVerifyCheckerViewPageWhenModifedTheBankMaker" time="0.001">
    <skipped/>
  </testcase> <!-- testloginToBankCheckerToVerifyCheckerViewPageWhenModifedTheBankMaker -->
</testsuite> <!-- Default test(failed) -->
